name: Python Playwright Setup and Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget \
          unzip \
          xvfb \
          libglib2.0-0 \
          libnss3 \
          libnspr4 \
          libatk1.0-0 \
          libatk-bridge2.0-0 \
          libx11-xcb1 \
          libxcb-dri3-0 \
          libdrm2 \
          libgbm1 \
          libasound2 \
          libgl1 \
          libxcomposite1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxss1 \
          libxtst6
    
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
    
    - name: Install Python dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Playwright and browsers
      run: |
        source venv/bin/activate
        pip install playwright
        python -m playwright install
        python -m playwright install-deps
    
    - name: Verify Playwright installation
      run: |
        source venv/bin/activate
        playwright --version
        python -c "from playwright.sync_api import sync_playwright; print('Playwright import successful')"
    
    - name: Run tests with verbose output
      run: |
        source venv/bin/activate
        mkdir -p test-results
        pytest -v --headed --screenshot=on
      env:
        PYTHONPATH: .
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-results
        path: test-results
        retention-days: 7
    
    - name: Zip artifact
      run: zip release.zip ./* -r
    
    - name: Upload artifact for deployment
      uses: actions/upload-artifact@v4
      with:
        name: python-app
        path: |
          release.zip
          !venv/

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: python-app
    
    - name: Unzip artifact
      run: unzip release.zip
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_B121F084855B4ABAB5562EF46A03228B }}
        tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_BAF52A642C534FB48642E16312C66990 }}
        subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F6950385D97449FD8043A052CBC620BF }}
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      id: deploy-to-webapp
      with:
        app-name: 'python-fastapi-app'
        slot-name: 'Production'